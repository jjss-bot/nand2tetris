// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    
    // notx = ~x
    Not16(in = x, out = notX);
    
    // noty = ~y
    Not16(in = y, out = notY);

    // if (zx == 0 && nx == 0) valueX = x 
    // if (zx == 0 && nx == 1) valueX = ~x 
    // if (zx == 1 && nx == 0) valueX = 0 
    // if (zx == 1 && nx == 1) valueX = 1        
    Mux4Way16(a = x, b = false, c = notX, d = true, sel[0] = zx, sel[1] = nx, out = valueX);
    
    // if (zy == 0 && ny == 0) valueY = y 
    // if (zy == 0 && ny == 1) valueY = ~y 
    // if (zy == 1 && ny == 0) valueY = 0 
    // if (zy == 1 && ny == 1) valueY = 1   
    Mux4Way16(a = y, b = false, c = notY, d = true, sel[0] = zy, sel[1] = ny, out = valueY);

    // XsumY  = x + y  
    Add16(a = valueX, b = valueY, out = XsumY);
    
    // XandY = x & y  
    And16(a = valueX, b = valueY, out = XandY);

    //fout = (f == 1)? XsumY : XandY
    Mux16(a = XandY, b = XsumY, sel = f, out = fout);
    
    // notfout = ~fout
    Not16(in = fout, out = notfout);
    
    // out = (not == 1) ? notfout : fout
    // ng = out[15]
    Mux16(a = fout, b = notfout, sel = no, out[0..7] = low, out[8..15] = high, out[15] = ng, out = res, out = out);

    // zr = ~(out[0] | out[1] | out[2] | out[3] | out[4] | 
    // out[5] | out[6] | out[7] | out[8] | out[9] | out[10] | 
    // out[11] | out[12] | out[13] | out[14] | out[15])
    Or8Way(in = low, out = orlow);
    Or8Way(in = high, out = orhigh);
    Or(a = orlow, b = orhigh, out = tmp);
    Not(in = tmp, out = zr);

}
