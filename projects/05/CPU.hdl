// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    /*-------------A Register---------------*/
    
    // MuxtoRegisterA = (instruction[15] == 1) ? fxy : instruction
    Mux16(a = instruction, b = fxy, sel = instruction[15], out = toA);
    
    // loadA = ~instruction[15] or instruction[5]
    Not(in = instruction[15], out = n15);
    Or(a = instruction[5], b = n15, out = loadA);
    
    // ARegister = (lda == 1) ? inA : outA
    ARegister(in = toA, load = loadA, out = dataA);
    
    
    /*----------------Ram--------------------*/
    
    // ddressM = ARegister
    And16(a = dataA, b = true, out[0..14] = addressM);
    
    // writeM = instruction[15] & instruction[3]
    And(a = instruction[15], b = instruction[3], out = writeM);
    
    // outM = fxy
    And16(a = fxy, b = true, out = outM);
    
    
    /*---------------D Register------------*/
    
    // Load DRegister = instruction[15] & instruction[4]
    And(a = instruction[15], b = instruction[4], out = loadD);
    
    // DRegister = (loadD == 1) ? fxy : dataD
    DRegister(in = fxy, load = loadD, out = x);
    
    
    /*------------------ALU---------------*/
    
    // Y = (instruction[12] == 1) ? inM : dataA
    Mux16(a = dataA , b = inM, sel = instruction[12], out = y);
    
    // Alu
    ALU(x = x, y = y, zx = instruction[11], nx = instruction[10], zy = instruction[9],
     	ny = instruction[8], f = instruction[7], no = instruction[6], out = fxy, zr = zero, ng = negative);
    
    
    /*-------------Program Counter-----------*/
    
    // loadPC = instruction[15] & (jmp | jgt | jeq | jlt)
    
    // jmp = j1 & j2 & j3
    And(a = instruction[0], b = instruction[1], out = net1);
    And(a = net1, b = instruction[2], out = jmp);
    
    // jgt = j3 & ~(zr|ng)
    Or(a = zero, b = negative, out = net2);
    Not(in = net2, out = net3);
    And(a = net3, b = instruction[0], out = jgt);
    
    // jeq = j2 & zr
    And(a = instruction[1], b = zero, out = jeq);
    
    // jlt = j3 & ng
    And(a = instruction[2], b = negative, out = jlt);
    
    // temp = jmp | jgt | jeq | jlt
    Or(a = jmp, b = jgt, out = tmp1);
    Or(a = tmp1, b = jeq, out = tmp2);
    Or(a = tmp2, b = jlt, out = temp);
    
    // loadPC = instruction[15] & temp3
    And(a = temp, b = instruction[15], out = loadPC);
    
    // inc = ~loadPC
    Not(in = loadPC, out = incPC); 
    
    // PC
    PC(in = dataA, load = loadPC, inc = incPC, reset = reset, out[0..14] = pc);
    
    
}
